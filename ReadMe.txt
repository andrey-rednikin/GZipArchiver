Постановка задачи:

Написать консольную программу на C#, предназначенную для поблочного сжатия и расжатия файлов с помощью System.IO.Compression.GzipStream. 

Для компрессии исходный файл делится на блоки одинакового размера, например, в 1 мегабайт. Каждый блок компрессится и записывается в выходной файл независимо от остальных блоков.

Программа должна эффективно распараллеливать и синхронизировать обработку блоков  в многопроцессорной среде и уметь обрабатывать файлы, размер которых превышает объем доступной оперативной памяти. 
В случае исключительных ситуаций необходимо проинформировать пользователя понятным сообщением, позволяющим пользователю исправить возникшую проблему, в частности если проблемы связаны с ограничениями операционной системы.
При работе с потоками допускается использовать только стандартные классы и библиотеки из .Net 3.5 (исключая ThreadPool, BackgroundWorker, TPL). Ожидается реализация с использованием Thread-ов.
Код программы должен соответствовать принципам ООП и ООД (читаемость, разбиение на классы и т.д.). 
Параметры программы, имена исходного и результирующего файлов должны задаваться в командной строке следующим образом:
GZipTest.exe compress/decompress [имя исходного файла] [имя результирующего файла]



Описание сделанного:

Проект создан в Visual Studio 2015, NET 4.6 (для работы с потоками использовались Thread, Monitor, ManualResetEvent)

Многопоточная обработка реализована как при архивации, так и при распаковке, но как и пишут в сети, при распаковке (по крайней мере на моей машине) она не дает заметного преимущества — видимо, узким местом является производительность жесткого диска.

Чтобы избежать считывания в оперативную память всего входного файла целиком, или переполнения оперативной памяти обработанными блоками, готовыми к записи — в очередях входных и выходных блоков было добавлено ограничение на максимальный размер (при его превышении добавление новых элементов в очередь блокируется).

При архивации приложение перед каждым блоком добавляет в выходной файл свой заголовок, где указан исходный и сжатый размер блока. Поэтому полученный приложением файл не может быть открыт другими архиваторами. Возможно, есть способ встраивать размер сжатого блока в сам gzip chunk, но честно говоря не успел убедиться, что в его стандартном заголовке предусмотрено специальное место, которое специально предусмотрено для записи какой-то сторонней информации.